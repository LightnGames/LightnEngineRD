#include "../ViewInfo.sfh"
#include "MeshType.sfh"

#define FLT_MAX 3.402823466e+38
#define EPSILON 0.000001
#define UINT16_SIZE_IN_BYTE 2
#define UINT32_SIZE_IN_BYTE 4
#define UINT16_MAX 65535
#define UINT32_MAX 4294967295
#define POS_NAN 0x7f800000

struct IndirectArgument
{
    uint _indexCountPerInstance;
    uint _instanceCount;
    uint _startIndexLocation;
    int _baseVertexLocation;
    uint _startInstanceLocation;
};

struct CullingInfo
{
    uint _meshInstanceReserveCount;
};

ConstantBuffer<CullingInfo> _cullingInfo : register(b0);
ConstantBuffer<ViewInfo> _viewInfo : register(b2);

ByteAddressBuffer _meshes : register(t0);
ByteAddressBuffer _lodMeshes : register(t1);
ByteAddressBuffer _subMeshes : register(t2);
ByteAddressBuffer _meshInstances : register(t4);
ByteAddressBuffer _lodMeshInstances : register(t5);
ByteAddressBuffer _subMeshInstances : register(t6);
ByteAddressBuffer _indirectArgumentOffsets : register(t7);
ByteAddressBuffer _currentLodLevels : register(t8);
#if UBER_OCCLUSION
Texture2D<float> _hizTextures[] : register(t13);
#endif

RWByteAddressBuffer _indirectArguments : register(u0);
RWByteAddressBuffer _countBuffer : register(u1);
RWByteAddressBuffer _indirectArgumentSubInfos : register(u2);

[numthreads(128, 1, 1)]
void main(uint gid : SV_GroupID, uint gtid : SV_GroupThreadID, uint dtid : SV_DispatchThreadID) {
    uint meshInstanceIndex = dtid;
    if (_cullingInfo._meshInstanceReserveCount <= dtid)
    {
        return;
    }
    
    MeshInstance meshInstance = _meshInstances.Load<MeshInstance>(sizeof(MeshInstance) * meshInstanceIndex);
    if (meshInstance._stateFlags == 0)
    {
        return;
    }
    
    Mesh mesh = _meshes.Load<Mesh>(sizeof(Mesh) * meshInstance._meshIndex);
    //uint lodLevel = getCurrentLodLevel(meshInstanceIndex);
    uint lodLevel = 0;
	
    uint lodMeshOffset = mesh._lodMeshOffset + lodLevel;
    LodMesh lodMesh = _lodMeshes.Load<LodMesh>(sizeof(LodMesh) * lodMeshOffset);
    uint subMeshCount = lodMesh._subMeshCount;
    
    uint lodMeshInstanceOffset = meshInstance._lodMeshInstanceOffset + lodLevel;
    LodMeshInstance lodMeshInstance = _lodMeshInstances.Load<LodMeshInstance>(sizeof(LodMeshInstance) * lodMeshInstanceOffset);
    for (uint subMeshLocalIndex = 0; subMeshLocalIndex < subMeshCount; ++subMeshLocalIndex)
    {
        uint subMeshInstanceIndex = lodMeshInstance._subMeshInstanceOffset + subMeshLocalIndex;
        uint subMeshOffset = lodMesh._subMeshOffset + subMeshLocalIndex;
        SubMesh subMesh = _subMeshes.Load<SubMesh>(sizeof(SubMesh) * subMeshOffset);
        SubMeshInstance subMeshInstance = _subMeshInstances.Load<SubMeshInstance>(sizeof(SubMeshInstance) * subMeshInstanceIndex);
        
        uint indirectArgumentMaterialArrayOffset = 0;
        uint currentCountIndex = 0;
        _countBuffer.InterlockedAdd(indirectArgumentMaterialArrayOffset, 1, currentCountIndex);
	
        uint indirectArgumentMaterialOffset = _indirectArgumentOffsets.Load<uint>(sizeof(uint) * indirectArgumentMaterialArrayOffset);
        uint indirectArgumentOffset = indirectArgumentMaterialOffset + currentCountIndex;
		
        IndirectArgument arguments;
        arguments._indexCountPerInstance = subMesh._indexCount;
        arguments._startIndexLocation = subMesh._indexOffset;
        arguments._instanceCount = 1;
        arguments._startInstanceLocation = indirectArgumentOffset;
        arguments._baseVertexLocation = lodMesh._vertexOffset;
        _indirectArguments.Store(sizeof(IndirectArgument) * indirectArgumentOffset, arguments);
        
        IndirectArgumentSubInfo subInfo;
        subInfo._meshInstanceIndex = meshInstanceIndex;
        subInfo._materialParameterOffset = subMeshInstance._materialParameterOffset;
        _indirectArgumentSubInfos.Store(sizeof(IndirectArgumentSubInfo) * indirectArgumentOffset, subInfo);

    }
}