#include "ShadingBase.sfh"

#define DEBUG_VISUALIZE_TYPE_NONE 0
#define DEBUG_VISUALIZE_TYPE_MESH_INSTANCE_LOD_LEVEL 1
#define DEBUG_VISUALIZE_TYPE_MESH_INSTANCE_SCREEN_PERSENTAGE 2
#define DEBUG_VISUALIZE_TYPE_MESH_INSTANCE_INDEX 3
#define DEBUG_VISUALIZE_TYPE_MATERIAL_SCREEN_PERSENTAGE 4
#define DEBUG_VISUALIZE_TYPE_LOCAL_POSITION 5
#define DEBUG_VISUALIZE_TYPE_WORLD_POSITION 6
#define DEBUG_VISUALIZE_TYPE_LOCAL_NORMAL 7
#define DEBUG_VISUALIZE_TYPE_WORLD_NORMAL 8
#define DEBUG_VISUALIZE_TYPE_LOCAL_TANGENT 9
#define DEBUG_VISUALIZE_TYPE_WORLD_TANGENT 10
#define DEBUG_VISUALIZE_TYPE_TEXCOORDS 11
#define DEBUG_VISUALIZE_TYPE_PRIMITIVE 12
#define DEBUG_VISUALIZE_TYPE_DDX 13
#define DEBUG_VISUALIZE_TYPE_DDY 14

struct Constant
{
    uint _type;
};

ConstantBuffer<Constant> _constant : register(b1);
ByteAddressBuffer _meshInstanceScreenPersentages : register(t19);
ByteAddressBuffer _materialScreenPersentages : register(t20);

float4 main(float4 position : SV_Position) : SV_TARGET
{
    PrimitiveInfo primitiveInfo = getPrimitiveInfo(position.xy);
    switch (_constant._type)
    {
        case DEBUG_VISUALIZE_TYPE_MESH_INSTANCE_LOD_LEVEL:
            {
                float screenPersentages = float(_meshInstanceLodLevels.Load(primitiveInfo._meshInstanceIndex * UINT32_SIZE_IN_BYTE)) / float(4);
                return float4(heatMap(screenPersentages), 1.0);
            }
        case DEBUG_VISUALIZE_TYPE_MESH_INSTANCE_SCREEN_PERSENTAGE:
            {
                float screenPersentages = float(_meshInstanceScreenPersentages.Load(primitiveInfo._meshInstanceIndex * UINT32_SIZE_IN_BYTE)) / float(UINT16_MAX);
                return float4(heatMap(1.0 - screenPersentages), 1.0);
            }
        case DEBUG_VISUALIZE_TYPE_MESH_INSTANCE_INDEX:
            {
                return float4(uniqueColor(primitiveInfo._meshInstanceIndex), 1);
            }
        case DEBUG_VISUALIZE_TYPE_MATERIAL_SCREEN_PERSENTAGE:
            {
                float screenPersentages = float(_materialScreenPersentages.Load(primitiveInfo._materialIndex * UINT32_SIZE_IN_BYTE)) / float(UINT16_MAX);
                return float4(heatMap(1.0 - screenPersentages), 1.0);
            }
        case DEBUG_VISUALIZE_TYPE_LOCAL_POSITION:
            {
                return float4(primitiveInfo._localPosition / 10.0, 1);
            }
        case DEBUG_VISUALIZE_TYPE_WORLD_POSITION:
            {
                return float4(primitiveInfo._worldPosition / 20.0, 1);
            }
        case DEBUG_VISUALIZE_TYPE_LOCAL_NORMAL:
            {
                return float4(primitiveInfo._localNormal * 0.5 + 0.5, 1);
            }
        case DEBUG_VISUALIZE_TYPE_WORLD_NORMAL:
            {
                return float4(primitiveInfo._worldNormal * 0.5 + 0.5, 1);
            }
        case DEBUG_VISUALIZE_TYPE_LOCAL_TANGENT:
            {
                return float4(primitiveInfo._localTangent * 0.5 + 0.5, 1);
            }
        case DEBUG_VISUALIZE_TYPE_WORLD_TANGENT:
            {
                return float4(primitiveInfo._worldTangent * 0.5 + 0.5, 1);
            }
        case DEBUG_VISUALIZE_TYPE_TEXCOORDS:
            {
                return float4(primitiveInfo._texcoords, 0, 1);
            }
        case DEBUG_VISUALIZE_TYPE_PRIMITIVE:
            {
                return float4(uniqueColor(_triangleAttributes[position.xy].x), 1.0);
            }
        case DEBUG_VISUALIZE_TYPE_DDX:
            {
                return float4(primitiveInfo._ddx, 0.0, 1.0);
            }
        case DEBUG_VISUALIZE_TYPE_DDY:
            {
                return float4(primitiveInfo._ddy, 0.0, 1.0);
            }
    }
    
    return float4(0.18, 0.18, 0.18, 1.0);
}