#include "../Def.sfh"

struct Constant
{
    uint2 _resolution;
};

ConstantBuffer<Constant> _constant : register(b0);
Texture2D<uint> _shaderId : register(t0);
RWByteAddressBuffer _shaderRangeMin : register(u0);
RWByteAddressBuffer _shaderRangeMax : register(u1);

struct PSInput {
    float4 _position : SV_Position;
};

#define SHADER_RANGE_PIXEL_WIDTH 64
float main(PSInput input) : SV_Depth
{
    uint2 pixelPosition = uint2(input._position.xy - float2(0.5, 0.5));
    uint shaderIndex = _shaderId[pixelPosition];
    uint shaderIndexMin = WaveActiveMin(shaderIndex);
    uint shaderIndexMax = WaveActiveMax(shaderIndex);
    
    if (WaveIsFirstLane())
    {
        uint dummy = 0;
        uint2 shaderRangeUv = pixelPosition / uint2(SHADER_RANGE_PIXEL_WIDTH, SHADER_RANGE_PIXEL_WIDTH);
        uint shaderRangeIndex = _constant._resolution.x * shaderRangeUv.y + shaderRangeUv.x;
        _shaderRangeMin.InterlockedMin(shaderRangeIndex * UINT32_SIZE_IN_BYTE, shaderIndexMin, dummy);
        _shaderRangeMax.InterlockedMax(shaderRangeIndex * UINT32_SIZE_IN_BYTE, shaderIndexMax, dummy);
    }
    
    float shaderIndexUnorm = float(shaderIndex) / float(UINT16_MAX);
    return shaderIndexUnorm;
}