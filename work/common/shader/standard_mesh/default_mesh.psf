#include "../shaderInput.sfh"
#include "../constant_buffer.sfh"
#include "../gpu_driven.sfh"
#include "../util.sfh"

static const uint GLOBAL_SDF_LAYER_LEVEL = 4;
static const float SDF_GLOBAL_CELL_HALF_SIZE = 25.6;
static const float SDF_GLOBAL_CELL_SIZE = 6.4f;
static const int SDF_GLOBAL_WIDTH = 8;

ConstantBuffer<ViewInfo> _sceneInfo : register(b0);
StructuredBuffer<CustomParameters> _customParameters : register(t0);
StructuredBuffer<MeshInstance> _meshInstances : register(t6);
Texture2D _textures[128] : register(t29);

StructuredBuffer<float4x3> _meshInstanceBoundsInvMatrices : register(t157);
StructuredBuffer<uint> _sdfMeshInstanceIndexOffsets[GLOBAL_SDF_LAYER_LEVEL] : register(t158);
StructuredBuffer<uint> _sdfMeshInstanceIndices[GLOBAL_SDF_LAYER_LEVEL] : register(t162);
StructuredBuffer<uint> _sdfMeshInstanceCounts[GLOBAL_SDF_LAYER_LEVEL] : register(t166);
Texture3D _sdfTextures[] : register(t170);

SamplerState _sampler : register(s0);
SamplerState _linerSampler : register(s1);

// position が AABB の内側にあるか判定します
bool isInsideAABB(float3 position, float halfExtent)
{
    return abs(position.x) <= halfExtent &&
            abs(position.y) <= halfExtent &&
            abs(position.z) <= halfExtent;
}

// [ x, y, z ] のインデックスから 1次元配列にアクセスするためのインデックスを計算します
uint getSdfIndexFromId(int3 id)
{
    uint depthOffset = id.z * SDF_GLOBAL_WIDTH * SDF_GLOBAL_WIDTH;
    uint heightOffset = id.y * SDF_GLOBAL_WIDTH;
    uint widthOffset = id.x;
    return depthOffset + heightOffset + widthOffset;
}

// SDF の 3D テクスチャをサンプルします
float sampleSdf(uint textureIndex, float3 localPosition)
{
    return _sdfTextures[textureIndex].Sample(_linerSampler, localPosition + float3(0.5, 0.5, 0.5)).x;
}

// SDF をレイマーチして交差するか取得します
bool intersectSdf(uint sdfIndex, float3 position, float3 rayDirection)
{
    float invStepScale = max(1.0 / length(rayDirection), 0.01);
    int SAMPLE_COUNT_MAX = 16;
    float BIAS = 0.01;
    float minStepSize = 1.0f / (4 * SAMPLE_COUNT_MAX);
    bool isHit = false;
    float3 rayStartPosition = position;
    float3 currentRayOrigin = rayStartPosition;
    float rayDistance = invStepScale * 0.05;
    
    [loop]
    for (int i = 0; i < SAMPLE_COUNT_MAX; ++i)
    {
        currentRayOrigin = rayStartPosition + rayDistance * rayDirection;
        if (!isInsideAABB(currentRayOrigin, 0.5))
        {
            break;
        }
        
        float distance = sampleSdf(sdfIndex, currentRayOrigin);      
        float stepDistance = max(distance, minStepSize);
        rayDistance += stepDistance;
        
        if (distance < BIAS)
        {
            return true;
        }
    }
    return false;
}

// レイが AABB と交差するか取得します
bool intersectRayAABB(float3 ro, float3 rd, float3 pmin, float3 pmax, out float2 distances, out float3 uv3)
{
    float3 tmin = (pmin - ro) / rd;
    float3 tmax = (pmax - ro) / rd;
    float3 sc = min(tmin, tmax);
    float3 sf = max(tmin, tmax);
    float t0 = max(max(sc.x, sc.y), sc.z);
    float t1 = min(min(sf.x, sf.y), sf.z);

    distances = float2(t0, t1);
    
    if (isInsideAABB(ro, 0.5))
    {
        uv3 = ro;
        return true;
    }
    
    if (t0 < 0)
    {
        return false;
    }
    
    // Texture coordinates
    float3 uv = ro + t0 * rd;
    if (isInsideAABB(uv, 0.5 + EPSILON))
    {
        uv3 = uv;
        return true;
    }
    
    return false;
}

// ワールド座標から GDF レイヤーレベルを取得します
uint getGlobalDistanceFieldLayerLevel(float3 worldPosition)
{
    int3 position = int3(abs(worldPosition) / SDF_GLOBAL_CELL_HALF_SIZE);
    int3 levels = firstbithigh(position) + 1;
    return max(levels.x, max(levels.y, levels.z));
}

// Distance field を用いたシャドウ
bool raytraceShadow(float3 rayOrigin, float3 lightDirection)
{
    float3 invLightDirection = -lightDirection;
    uint WORLD_CELL_LOOP_COUNT_MAX = 4;
    float cellDistance = 0.15;
    uint3 prevWorldPosition = uint3(0, 0, 0);
    
    // セルごとにグリッドを走査
    [loop]
    for (uint cellItr = 0; cellItr < WORLD_CELL_LOOP_COUNT_MAX; ++cellItr)
    {
        float3 worldPosition = rayOrigin + cellDistance * invLightDirection;
        uint minLayerLevel = getGlobalDistanceFieldLayerLevel(worldPosition);
        if (minLayerLevel >= GLOBAL_SDF_LAYER_LEVEL - 1)
        {
            break;
        }
        
        // 走査するレイヤーの最大レベルを計算
        uint3 currentWorldPosition = abs(int3(floor(worldPosition / SDF_GLOBAL_CELL_SIZE)));
        uint3 diff = currentWorldPosition ^ prevWorldPosition;
        int3 worldPositionDiff = firstbithigh(int3(diff)) + 1;
        uint topLayerLevel = min(max(worldPositionDiff.x, max(worldPositionDiff.y, worldPositionDiff.z)), GLOBAL_SDF_LAYER_LEVEL);
        
        // 最初のセルは最上位レイヤーまで捜査
        if (cellItr == 0)
        {
            topLayerLevel = GLOBAL_SDF_LAYER_LEVEL;

        }
        prevWorldPosition = currentWorldPosition;
        
        // 最小〜最大レイヤーレベルまでグリッド内のメッシュインスタンスを走査
        [loop]
        for (uint layerLevel = minLayerLevel; layerLevel < topLayerLevel; ++layerLevel)
        {
            // 検索するレイヤーのグリッドIDを取得
            float cellSize = (1 << layerLevel) * SDF_GLOBAL_CELL_SIZE;
            float layerExtent = float(SDF_GLOBAL_WIDTH) * cellSize * 0.5;
            float3 layerCenterOffset = float3(layerExtent, layerExtent, layerExtent);
            int3 sdfGridId = int3((worldPosition + layerCenterOffset) / cellSize);
            uint sdfGridIndex = getSdfIndexFromId(sdfGridId);
            
            // グリッド内のメッシュインスタンスバウンディング OBB にレイがヒットするかチェック
            uint sdfInstanceCount = _sdfMeshInstanceCounts[NonUniformResourceIndex(layerLevel)][sdfGridIndex];
            uint sdfInstanceStartOffset = _sdfMeshInstanceIndexOffsets[NonUniformResourceIndex(layerLevel)][sdfGridIndex];
            [loop]
            for (int i = 0; i < sdfInstanceCount; ++i)
            {
                uint sdfMeshInstanceIndex = _sdfMeshInstanceIndices[NonUniformResourceIndex(layerLevel)][sdfInstanceStartOffset + i];
                float4x3 invBoundsMatrix = _meshInstanceBoundsInvMatrices[sdfMeshInstanceIndex];
                float3 position = mul(float4(worldPosition, 1), invBoundsMatrix).xyz;
                float3 rayDirection = mul(invLightDirection, (float3x3) invBoundsMatrix);
                float2 distances;
                float3 uv3;
                bool intersectBounds = intersectRayAABB(position, rayDirection, float3(-0.5, -0.5, -0.5), float3(0.5, 0.5, 0.5), distances, uv3);
                #define SAMPLE_SDF 1
                if (intersectBounds)
                {
                #if SAMPLE_SDF
                    // バウンディングOBBにヒットした場合、メッシュインスタンスに対してレイマーチする
                    MeshInstance meshInstance = _meshInstances[sdfMeshInstanceIndex];
                    if (intersectSdf(meshInstance._meshIndex, uv3, rayDirection))
                    {
                        return true;
                    }
                #else
                    return true;
                #endif
                }
            }
        }
        
        // レイがいずれもヒットしない場合、cellDistance を次のグリッドを示す距離にする
        float cellSize = (1 << minLayerLevel) * SDF_GLOBAL_CELL_SIZE;
        float3 halfCellSize = float3(cellSize, cellSize, cellSize) / 2.0;
        float3 cellCenter = floor(worldPosition / cellSize) * cellSize + halfCellSize;
        float2 distances;
        float3 uv3;
        intersectRayAABB(worldPosition, invLightDirection, cellCenter - halfCellSize, cellCenter + halfCellSize, distances, uv3);
        
        // 現在のグリッドAABBの終端までの距離を加算する
        cellDistance += distances.y + EPSILON;
    }
    
    return false;
}


float4 main(VertexOut input) : SV_TARGET
{
    CustomParameters materialParameter = _customParameters[input._materialIndex];
    Texture2D albedoTexture = _textures[NonUniformResourceIndex(materialParameter._albedoTextureIndex)];
    float3 baseColor = albedoTexture.Sample(_sampler, input._texcoord).rgb;
    
    bool shadow = raytraceShadow(input._worldPosition, normalize(float3(-1, -1, -1)));
    //bool shadow = false;
    //return float4(float3(sdfInstanceCount, sdfGridIndex, 0) / 100.0, 1);
    
    //return float4(sdfInstanceCount, 0.1, 0, 1);
    //return float4(debugTotalStep / 20.0, 0, 0, 1);
    return float4(lerp(baseColor, float3(0, 0, 0), shadow ? 0.5 : 0), 1.0);
}