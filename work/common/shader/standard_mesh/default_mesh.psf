#include "../shaderInput.sfh"
#include "../constant_buffer.sfh"
#include "../gpu_driven.sfh"

static const uint GLOBAL_SDF_LAYER_LEVEL = 2;
static const float SDF_GLOBAL_CELL_HALF_SIZE = 25.6;
static const float SDF_GLOBAL_CELL_SIZE = 6.4f;
static const int SDF_GLOBAL_WIDTH = 8;

ConstantBuffer<ViewInfo> _sceneInfo : register(b0);
StructuredBuffer<CustomParameters> _customParameters : register(t0);
StructuredBuffer<MeshInstance> _meshInstances : register(t6);
Texture2D _textures[128] : register(t29);

StructuredBuffer<float4x3> _meshInstanceBoundsInvMatrices : register(t157);
StructuredBuffer<uint> _sdfMeshInstanceIndexOffsets[GLOBAL_SDF_LAYER_LEVEL] : register(t158);
StructuredBuffer<uint> _sdfMeshInstanceIndices[GLOBAL_SDF_LAYER_LEVEL] : register(t160);
StructuredBuffer<uint> _sdfMeshInstanceCounts[GLOBAL_SDF_LAYER_LEVEL] : register(t162);
Texture3D _sdfTextures[] : register(t164);

SamplerState _sampler : register(s0);
SamplerState _linerSampler : register(s1);

uint getSdfIndexFromId(int3 id)
{
    uint depthOffset = id.z * SDF_GLOBAL_WIDTH * SDF_GLOBAL_WIDTH;
    uint heightOffset = id.y * SDF_GLOBAL_WIDTH;
    uint widthOffset = id.x;
    return depthOffset + heightOffset + widthOffset;
}

float sampleSdf(uint textureIndex, float3 localPosition)
{
    float3 size;
    float level;
    _sdfTextures[textureIndex].GetDimensions(0, size.x, size.y, size.z, level);
    
    float3 offset = float3(1.0, 1.0, 1.0) / size * 0.5;
    offset = float3(0, 0, 0);
    return _sdfTextures[textureIndex].Sample(_linerSampler, localPosition + float3(0.5, 0.5, 0.5) + offset).x;
}

bool intersectSdf(uint sdfIndex, float3 position, float3 rayDirection)
{
    float invStepScale = max(1.0 / length(rayDirection), 0.01);
    int SAMPLE_COUNT_MAX = 32;
    float BIAS = 0.01;
    float minStepSize = 1.0f / (4 * SAMPLE_COUNT_MAX);
    bool isHit = false;
    float3 rayStartPosition = position;
    float3 currentRayOrigin = rayStartPosition;
    float rayDistance = invStepScale * 0.1;
    for (int i = 0; i < SAMPLE_COUNT_MAX; ++i)
    {
        currentRayOrigin = rayStartPosition + rayDistance * rayDirection;
        if (abs(currentRayOrigin.x) > 0.5)
        {
            return false;
        }
        
        if (abs(currentRayOrigin.y) > 0.5)
        {
            return false;
        }
        
        if (abs(currentRayOrigin.z) > 0.5)
        {
            return false;
        }
        
        float distance = sampleSdf(sdfIndex, currentRayOrigin);
        
        float stepDistance = max(distance, minStepSize);
        rayDistance += stepDistance;
        
        if (distance < BIAS)
        {
            return true;
        }
    }
    return false;
}

bool isInsideAABB(float3 position, float halfExtent)
{
    return abs(position.x) <= halfExtent &&
            abs(position.y) <= halfExtent &&
            abs(position.z) <= halfExtent;
}

bool intersectRayAABB(float3 ro, float3 rd, float3 pmin, float3 pmax, out float2 distances, out float3 uv3)
{   
    float3 tmin = (pmin - ro) / rd;
    float3 tmax = (pmax - ro) / rd;
    float3 sc = min(tmin, tmax);
    float3 sf = max(tmin, tmax);
    float t0 = max(max(sc.x, sc.y), sc.z);
    float t1 = min(min(sf.x, sf.y), sf.z);

    distances = float2(t0, t1);
    
    if (isInsideAABB(ro, 0.5))
    {
        uv3 = ro;
        return true;
    }
    
    // Texture coordinates
    float3 uv = ro + t0 * rd;
    if (abs(uv.x) - EPSILON > 0.5)
    {
        return false;
    }
        
    if (abs(uv.y) - EPSILON > 0.5)
    {
        return false;
    }
        
    if (abs(uv.z) - EPSILON > 0.5)
    {
        return false;
    }
    
    if (t0 < 0)
    {
        return false;
    }
    
    uv3 = uv;
    
    return true;
}

uint getGlobalDistanceFieldLayerLevel(float3 worldPosition)
{
    float width = SDF_GLOBAL_CELL_HALF_SIZE;
    for (uint i = 0; i < GLOBAL_SDF_LAYER_LEVEL; ++i)
    {
        if (isInsideAABB(worldPosition, width))
        {
            return i;
        }
        width *= 2;
    }

    return GLOBAL_SDF_LAYER_LEVEL - 1;
}


float4 main(VertexOut input) : SV_TARGET {
    CustomParameters materialParameter = _customParameters[input._materialIndex];
    Texture2D albedoTexture = _textures[NonUniformResourceIndex(materialParameter._albedoTextureIndex)];
    float3 baseColor = albedoTexture.Sample(_sampler, input._texcoord).rgb;
    
    uint debugTotalStep = 0;
    float3 invLightDirection = normalize(-float3(-1, -1, -1));
    uint WORLD_CELL_LOOP_COUNT_MAX = 14;
    float cellDistance = 0;
    bool shadow = false;
    for (uint cellItr = 0; cellItr < WORLD_CELL_LOOP_COUNT_MAX; ++cellItr)
    {
        float3 worldPosition = input._worldPosition + cellDistance * invLightDirection;
        uint layerLevel = getGlobalDistanceFieldLayerLevel(worldPosition);
        float layerExtent = SDF_GLOBAL_CELL_HALF_SIZE * (layerLevel + 1);
        float cellSize = SDF_GLOBAL_CELL_SIZE * (layerLevel + 1);
        float3 layerCenterOffset = float3(layerExtent, layerExtent, layerExtent);
        int3 sdfGridId = int3((worldPosition + layerCenterOffset) / cellSize);
        uint sdfGridIndex = getSdfIndexFromId(sdfGridId);
        
        uint sdfInstanceCount = INVALID_INDEX;
        if (isInsideAABB(worldPosition, layerExtent))
        {
            sdfInstanceCount = _sdfMeshInstanceCounts[NonUniformResourceIndex(layerLevel)][sdfGridIndex];
        }
    
        if (sdfInstanceCount == INVALID_INDEX)
        {
            break;
        }
        
        uint sdfInstanceStartOffset = _sdfMeshInstanceIndexOffsets[NonUniformResourceIndex(layerLevel)][sdfGridIndex];
        for (int i = 0; i < sdfInstanceCount; ++i)
        {
            uint sdfMeshInstanceIndex = _sdfMeshInstanceIndices[NonUniformResourceIndex(layerLevel)][sdfInstanceStartOffset + i];
            float4x3 invBoundsMatrix = _meshInstanceBoundsInvMatrices[sdfMeshInstanceIndex];
            float3 position = mul(float4(worldPosition, 1), invBoundsMatrix).xyz;
            float3 rayDirection = mul(invLightDirection, (float3x3) invBoundsMatrix);
            float2 distances;
            float3 uv3;
            if (intersectRayAABB(position, rayDirection, float3(-0.5, -0.5, -0.5), float3(0.5, 0.5, 0.5), distances, uv3))
            {
                debugTotalStep++;
                MeshInstance meshInstance = _meshInstances[sdfMeshInstanceIndex];
                if (intersectSdf(meshInstance._meshIndex, uv3, rayDirection))
                {
                    shadow = true;
                    break;
                }
            }
        }
        
        if (shadow)
        {
            break;
        }
        
        float3 halfCellSize = float3(cellSize, cellSize, cellSize) / 2.0;
        float3 cellCenter = floor(worldPosition / cellSize) * cellSize + halfCellSize;
        float2 distances;
        float3 uv3;
        intersectRayAABB(worldPosition, invLightDirection, cellCenter - halfCellSize, cellCenter + halfCellSize, distances, uv3);
        cellDistance += distances.y + EPSILON;
    }
    //return float4(float3(sdfInstanceCount, sdfGridIndex, 0) / 100.0, 1);
    
    //return float4(sdfInstanceCount, 0.1, 0, 1);
    //return float4(debugTotalStep / 20.0, 0, 0, 1);
    return float4(lerp(baseColor, float3(0, 0, 0), shadow ? 0.5 : 0), 1.0);
}