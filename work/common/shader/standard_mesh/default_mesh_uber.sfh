#include "../constant_buffer.sfh"
#include "../shaderInput.sfh"
#include "../gpu_driven.sfh"

ConstantBuffer<ViewInfo> _viewInfo : register(b0);
#if UBER_PRIMITIVE_INSTANCING
ConstantBuffer<IndirectArgumentConstant> _primitiveInstancingConstant : register(b2);
#endif

StructuredBuffer<CustomParameters> _customParameters : register(t0);
StructuredBuffer<Mesh> _meshes : register(t1);
StructuredBuffer<LodMesh> _lodMeshes : register(t2);
StructuredBuffer<SubMesh> _subMeshes : register(t3);
StructuredBuffer<Meshlet> _meshlets : register(t4);

StructuredBuffer<MeshInstance> _meshInstances : register(t5);
StructuredBuffer<LodMeshInstance> _lodMeshInstances : register(t6);
StructuredBuffer<SubMeshInstance> _subMeshInstances : register(t7);

StructuredBuffer<MeshletInstanceInfo> _meshletInstanceInfos : register(t9);
StructuredBuffer<uint> _vertexIndices : register(t10);
StructuredBuffer<uint> _primitives : register(t11);
StructuredBuffer<float3> _vertexPositions : register(t12);
StructuredBuffer<uint> _vertexNormalTangents : register(t13);
StructuredBuffer<uint> _vertexTexcoords : register(t14);

[NumThreads(128, 1, 1)]
[OutputTopology("triangle")]
void main(
	uint gid : SV_GroupID,
	uint gtid : SV_GroupThreadID,
	uint dtid : SV_DispatchThreadID,
#if UBER_DEFAULT
    in payload PayloadStruct meshPayload,
#endif
    out indices uint3 tris[126],
    out vertices VertexOut verts[64]
)
{
#if UBER_DEFAULT
    uint localGtid = gtid;
    uint meshInstanceIndex = meshPayload._meshInstanceIndices[gid];
    uint meshletIndex = meshPayload._meshletIndices[gid];
    uint primitiveOffset = meshPayload._primitiveOffset[gid];
    uint vertexLocalOffset = meshPayload._vertexOffset[gid];
    uint vertexIndexOffset = meshPayload._vertexIndexOffset[gid];
    uint materialIndex = meshPayload._materialIndex[gid];
#endif
#if UBER_PRIMITIVE_INSTANCING
    uint meshletIndex = _primitiveInstancingConstant._meshletCount;// meshletIndex
#endif
    if (gtid >= 126) {
        return;
    }

    Meshlet meshlet = _meshlets[meshletIndex];
    uint vertexCount = meshlet._vertexCount;
    uint primitiveCount = meshlet._primitiveCount;
#if UBER_PRIMITIVE_INSTANCING
    uint vertexInstanceIndex = gtid / vertexCount;
    uint primitiveInstanceIndex = gtid / primitiveCount;
    uint vertexGtid = gtid % vertexCount;
    uint primitiveGtid = gtid % primitiveCount;
    uint instanceCount = _primitiveInstancingConstant._instanceCount;
    uint localInstanceOffset = gid * instanceCount;
    uint globalInstanceIndex = _primitiveInstancingConstant._meshletInstanceInfoOffset + localInstanceOffset;

    SetMeshOutputCounts(vertexCount * instanceCount, primitiveCount * instanceCount);

    if(primitiveInstanceIndex < instanceCount) {
        MeshletInstanceInfo primitiveMeshletInstanceInfo = _meshletInstanceInfos[globalInstanceIndex + primitiveInstanceIndex];
        uint primitiveOffset = primitiveMeshletInstanceInfo._primitiveOffset;
        uint primitiveIndex = meshlet._primitiveOffset + primitiveGtid;
        uint packedIndex = _primitives[primitiveOffset + primitiveIndex];
        uint3 unpackedIndex = uint3(packedIndex & 0xff, (packedIndex >> 8) & 0xff, (packedIndex >> 16) & 0xff);
        uint indexOffset = primitiveCount * primitiveInstanceIndex;
        unpackedIndex += uint3(indexOffset, indexOffset, indexOffset);
        tris[gtid] = unpackedIndex;
    }

    if(vertexInstanceIndex < instanceCount) {
        MeshletInstanceInfo vertexMeshletInstanceInfo = _meshletInstanceInfos[globalInstanceIndex + vertexInstanceIndex];
        uint meshInstanceIndex = vertexMeshletInstanceInfo._meshInstanceIndex;
        uint materialIndex = vertexMeshletInstanceInfo._materialIndex;
        uint vertexLocalOffset = vertexMeshletInstanceInfo._vertexOffset;
        uint vertexIndexOffset = vertexMeshletInstanceInfo._vertexIndexOffset;
        MeshInstance meshInstance = _meshInstances[meshInstanceIndex];
    
        uint vertexLocalIndex = meshlet._vertexOffset + vertexGtid;
        uint vertexIndex = _vertexIndices[vertexIndexOffset + vertexLocalIndex];
        uint vertexOffset = vertexLocalOffset + vertexIndex;
        float3 positionVertex = _vertexPositions[vertexOffset];
        float4 worldPos = mul(float4(positionVertex, 1), meshInstance._matrixWorld);
        
        VertexOut vertexOut;
        vertexOut._position = mul(worldPos, _viewInfo._matrixViewProj);
        vertexOut._positionNdc = worldPos;
        vertexOut._texcoord = unpackTexCoords(_vertexTexcoords[vertexOffset]);
        vertexOut._meshletIndex = meshletIndex;
        vertexOut._materialIndex = materialIndex;
        vertexOut._meshInstanceIndex = meshInstanceIndex;
        verts[gtid] = vertexOut;
    }
#endif
#if UBER_DEFAULT
    SetMeshOutputCounts(vertexCount, primitiveCount);
    if(localGtid < primitiveCount){
        uint primitiveIndex = meshlet._primitiveOffset + localGtid;
        uint packedIndex = _primitives[primitiveOffset + primitiveIndex];
        uint3 unpackedIndex = uint3(packedIndex & 0xff, (packedIndex >> 8) & 0xff, (packedIndex >> 16) & 0xff);
        tris[gtid] = unpackedIndex;
    }

    if(localGtid < vertexCount){
        MeshInstance meshInstance = _meshInstances[meshInstanceIndex];
        uint vertexLocalIndex = meshlet._vertexOffset + localGtid;
        uint vertexIndex = _vertexIndices[vertexIndexOffset + vertexLocalIndex];
        uint vertexOffset = vertexLocalOffset + vertexIndex;
        float3 positionVertex = _vertexPositions[vertexOffset];
        float4 worldPos = mul(float4(positionVertex, 1), meshInstance._matrixWorld);
        
        VertexOut vertexOut;
        vertexOut._position = mul(worldPos, _viewInfo._matrixViewProj);
        vertexOut._positionNdc = worldPos;
        vertexOut._texcoord = unpackTexCoords(_vertexTexcoords[vertexOffset]);
        vertexOut._meshletIndex = meshletIndex;
        vertexOut._materialIndex = materialIndex;
        vertexOut._meshInstanceIndex = meshInstanceIndex;
        verts[gtid] = vertexOut;
    }
#endif
}
