#include "gpu_culling_function.sfh"

struct Constant {
    uint _packedMeshletCount;
};

ConstantBuffer<Constant> _constant : register(b0);

ByteAddressBuffer _infoOffsets : register(t0);
ByteAddressBuffer _infoCounts : register(t1);
StructuredBuffer<SubMesh> _subMeshes : register(t2);
StructuredBuffer<Meshlet> _meshlets : register(t3);

RWStructuredBuffer<DispatchMeshIndirectArgumentAS> _indirectArguments : register(u0);
RWByteAddressBuffer _countBuffer : register(u1);
RWStructuredBuffer<DispatchMeshIndirectArgumentMS> _primIndirectArguments : register(u2);
RWByteAddressBuffer _primCountBuffer : register(u3);

[numthreads(128, 1, 1)]
void main(uint gid : SV_GroupID, uint gtid : SV_GroupThreadID, uint dtid : SV_DispatchThreadID) {
    uint instanceCount = _infoCounts.Load(dtid * UINT32_SIZE_IN_BYTE);
    if (instanceCount == 0) {
        return;
    }
    
    uint subMeshIndex = dtid % INSTANCING_PER_SHADER_COUNT_MAX;
    uint shaderSetIndex = dtid / INSTANCING_PER_SHADER_COUNT_MAX;
    SubMesh subMesh = _subMeshes[subMeshIndex];
    uint meshletCount = subMesh._meshletCount;
    
    IndirectArgumentConstant constant;
    constant._meshletInstanceInfoOffset = _infoOffsets.Load(dtid * UINT32_SIZE_IN_BYTE);
    constant._instanceCount = instanceCount;
    constant._meshletCount = meshletCount;
    
    uint packThreshold = _constant._packedMeshletCount;
    uint dispatchCount = (instanceCount * meshletCount / 32) + 1;
    if (meshletCount <= packThreshold) {
        Meshlet meshlet = _meshlets[subMesh._meshletOffset + meshletCount - 1];
        uint instanceCountPerThreadGroup = min(64 / meshlet._vertexCount, 126 / meshlet._primitiveCount);
        uint baseInstanceCount = (meshletCount - 1) * instanceCount;
        uint packInstanceCount = (instanceCount / instanceCountPerThreadGroup) + 1;
        dispatchCount = baseInstanceCount + packInstanceCount;
    }
    
    uint currentCount = 0;
    uint countOffset = shaderSetIndex * UINT32_SIZE_IN_BYTE;
    uint shaderSetOffset = shaderSetIndex * INSTANCING_PER_SHADER_COUNT_MAX;
    if (meshletCount <= packThreshold) {
        MeshShaderIndirectArgument msConstant;
        msConstant._constant = constant;
        msConstant._meshletOffset = subMesh._meshletOffset;
        
        DispatchMeshIndirectArgumentMS arguments;
        arguments._constant = msConstant;
        arguments._dispatchX = dispatchCount;
        arguments._dispatchY = 1;
        arguments._dispatchZ = 1;
        
        _primCountBuffer.InterlockedAdd(countOffset, 1, currentCount);
        _primIndirectArguments[shaderSetOffset + currentCount] = arguments;
    } else {
        DispatchMeshIndirectArgumentAS arguments;
        arguments._constant = constant;
        arguments._dispatchX = dispatchCount;
        arguments._dispatchY = 1;
        arguments._dispatchZ = 1;
        
        _countBuffer.InterlockedAdd(countOffset, 1, currentCount);
        _indirectArguments[shaderSetOffset + currentCount] = arguments;
    }
}