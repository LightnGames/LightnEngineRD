#include "gpu_culling_function.sfh"

struct DispatchMeshIndirectArgument {
    uint _batchedSubMeshInfoOffset;
    uint _instanceCount;
    uint _meshletCount;
    uint _dispatchX;
    uint _dispatchY;
    uint _dispatchZ;
};

ByteAddressBuffer _meshletInstanceInfoOffsets : register(t0);
ByteAddressBuffer _meshletInstanceInfoCounts : register(t1);

RWStructuredBuffer<DispatchMeshIndirectArgument> _indirectArguments : register(u0);
RWByteAddressBuffer _countBuffer : register(u1);

#define MESHLET_INSTANCE_MESHLET_COUNT_MAX 64

[numthreads(128, 1, 1)]
void main(uint gid : SV_GroupID, uint gtid : SV_GroupThreadID, uint dtid : SV_DispatchThreadID) {
    uint instanceCount = _meshletInstanceInfoCounts.Load(dtid * UINT32_SIZE_IN_BYTE);
    if (instanceCount == 0) {
        return;
    }
    
    uint meshletIndex = dtid % MESHLET_INSTANCE_MESHLET_COUNT_MAX;
    uint shaderSetIndex = dtid / MESHLET_INSTANCE_MESHLET_COUNT_MAX;
    uint meshletCount = meshletIndex + 1;
    
    uint currentCount = 0;
    uint countOffset = shaderSetIndex * UINT32_SIZE_IN_BYTE;
    _countBuffer.InterlockedAdd(countOffset, 1, currentCount);
    
    DispatchMeshIndirectArgument arguments;
    arguments._batchedSubMeshInfoOffset = _meshletInstanceInfoOffsets.Load(dtid * UINT32_SIZE_IN_BYTE);
    arguments._instanceCount = instanceCount;
    arguments._meshletCount = meshletCount;
    arguments._dispatchX = (instanceCount * meshletCount / 32) + 1;
    arguments._dispatchY = 1;
    arguments._dispatchZ = 1;
    
    uint indirectArgumentOffset = shaderSetIndex * MESHLET_INSTANCE_MESHLET_COUNT_MAX + currentCount;
    _indirectArguments[indirectArgumentOffset] = arguments;
}