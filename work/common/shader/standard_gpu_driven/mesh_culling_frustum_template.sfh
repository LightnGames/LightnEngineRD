#include "../gpu_culling_function.sfh"

struct StandardIndirectArgument {
    uint _meshInstanceIndex;
    uint _materialIndex;
    uint _indexCountPerInstance;
    uint _instanceCount;
    uint _startIndexLocation;
    int _baseVertexLocation;
    uint _startInstanceLocation;
};

struct SubMeshDrawInfo {
    uint _indexCount;
    uint _indexOffset;
};

ConstantBuffer<SceneCullingInfo> _sceneCullingInfo : register(b0);
ConstantBuffer<CullingViewInfo> _cullingViewInfo : register(b1);
ConstantBuffer<ViewInfo> _viewInfo :register(b2);
StructuredBuffer<Mesh> _meshes : register(t0);
StructuredBuffer<LodMesh> _lodMeshes : register(t1);
StructuredBuffer<SubMesh> _subMeshes : register(t2);
StructuredBuffer<MeshInstance> _meshInstances : register(t3);
StructuredBuffer<LodMeshInstance> _lodMeshInstances : register(t4);
StructuredBuffer<SubMeshInstance> _subMeshInstances : register(t5);
ByteAddressBuffer _indirectArgumentOffsets : register(t6);
ByteAddressBuffer _currentLodLevels : register(t7);
StructuredBuffer<SubMeshDrawInfo> _subMeshDrawInfos : register(t8);

RWStructuredBuffer<StandardIndirectArgument> _indirectArguments : register(u0);
RWByteAddressBuffer _countBuffer : register(u1);

#define THREAD_NUM 128
#define AMPLIFICATION_DISPATCH_NUM 32

bool isRangeMeshInstance(uint meshInstanceIndex) {
    return meshInstanceIndex < _sceneCullingInfo._meshInstanceCount;
}

bool isTested(uint meshInstanceIndex) {
    if (!isRangeMeshInstance(meshInstanceIndex)) {
        return false;
    }
    
    MeshInstance meshInstance = _meshInstances[meshInstanceIndex];
    if (!isEnabledMeshInstance(meshInstance)) {
        return false;
    }
    
    return true;
}

Mesh getMesh(MeshInstance meshInstance) {
    Mesh mesh = _meshes[meshInstance._meshIndex];
    if (mesh._stateFlags == MESH_STATE_ALLOCATED) {
        mesh = _meshes[0];
    }
    return mesh;
}

LodMesh getLodMesh(Mesh mesh, uint lodLevel) {
    uint lodMeshIndex = mesh._lodMeshOffset + lodLevel;
    return _lodMeshes[lodMeshIndex];
}

uint getMeshInstanceIndex(uint groupId, uint groupThreadId) {
    return groupId * THREAD_NUM + groupThreadId;
}

uint getCurrentLodLevel(uint meshInstanceIndex) {
    return _currentLodLevels.Load(meshInstanceIndex * UINT32_SIZE_IN_BYTE);
}

void addIndirectArgument(uint meshInstanceIndex) {
    MeshInstance meshInstance = _meshInstances[meshInstanceIndex];
    Mesh mesh = getMesh(meshInstance);
    uint lodLevel = getCurrentLodLevel(meshInstanceIndex);
	
    LodMesh lodMesh = getLodMesh(mesh, lodLevel);
    uint subMeshCount = lodMesh._subMeshCount;
    
    LodMeshInstance lodMeshInstance = _lodMeshInstances[meshInstance._lodMeshInstanceOffset + lodLevel];
    for (uint subMeshLocalIndex = 0; subMeshLocalIndex < subMeshCount; ++subMeshLocalIndex) {
        uint subMeshInstanceIndex = lodMeshInstance._subMeshInstanceOffset + subMeshLocalIndex;
        SubMesh subMesh = _subMeshes[lodMesh._subMeshOffset + subMeshLocalIndex];
        SubMeshInstance subMeshInstance = _subMeshInstances[subMeshInstanceIndex];
        SubMeshDrawInfo subMeshDrawInfo = _subMeshDrawInfos[subMeshInstanceIndex];
			
        uint shaderSetOffset = subMeshInstance._shaderSetIndex * UINT32_SIZE_IN_BYTE;
        uint currentCountIndex = 0;
        _countBuffer.InterlockedAdd(shaderSetOffset, 1, currentCountIndex);
	
        uint indirectArgumentShaderSetOffset = _indirectArgumentOffsets.Load(shaderSetOffset);
        uint indirectArgumentOffset = indirectArgumentShaderSetOffset + currentCountIndex;
		
        StandardIndirectArgument arguments;
        arguments._meshInstanceIndex = meshInstanceIndex;
        arguments._materialIndex = subMeshInstance._materialIndex;
        arguments._indexCountPerInstance = subMeshDrawInfo._indexCount;
        arguments._startIndexLocation = subMeshDrawInfo._indexOffset;
        arguments._instanceCount = 1;
        arguments._startInstanceLocation = 0;
        arguments._baseVertexLocation = lodMesh._vertexOffset;
        _indirectArguments[indirectArgumentOffset] = arguments;
    }
}