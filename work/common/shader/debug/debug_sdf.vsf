#include "../shaderInput.sfh"
#include "../constant_buffer.sfh"
#include "../gpu_driven.sfh"

ConstantBuffer<ViewInfo> _sceneInfo : register(b0);
StructuredBuffer<float4x3> _sdfBoundsWorldMatrics : register(t0);
StructuredBuffer<MeshInstance> _meshInstances : register(t1);

SdfPSInput main(Debug3dVSInput input) {
    uint instanceId = input._InstanceId;
    float4x3 matrixWorld = _sdfBoundsWorldMatrics[instanceId];
    
    int tri = input._vertexId / 3;
    int idx = input._vertexId % 3;
    int face = tri / 2;
    int top = tri % 2;

    int dir = face % 3;
    int pos = face / 3;

    int nz = dir >> 1;
    int ny = dir & 1;
    int nx = 1 ^ (ny | nz);

    float3 d = float3(nx, ny, nz);
    float flip = 1 - 2 * pos;

    float3 n = flip * d;
    float3 u = -d.yzx;
    float3 v = flip * d.zxy;

    float mirror = -1 + 2 * top;
    float3 localPosition = n + mirror * (1 - 2 * (idx & 1)) * u + mirror * (1 - 2 * (idx >> 1)) * v;
    localPosition *= 0.5;// -1.0 ~ 1.0 -> -0.5 ~ 0.5
    float4 worldPos = float4(mul(float4(localPosition, 1), matrixWorld), 1);
    
    SdfPSInput vertexOut;
    vertexOut._position = mul(worldPos, _sceneInfo._matrixViewProj);
    vertexOut._localPosition = localPosition;
    vertexOut._worldPosition = worldPos.xyz;
    vertexOut._meshInstanceIndex = instanceId;
    vertexOut._meshIndex = _meshInstances[instanceId]._meshIndex;
    return vertexOut;
}