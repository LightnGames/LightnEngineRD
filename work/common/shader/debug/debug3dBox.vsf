#include "../shaderInput.sfh"
#include "../constant_buffer.sfh"

struct BoxInstanceInfo {
    float4x3 _matrixWorld;
    float4 _color;
};

ConstantBuffer<ViewInfo> _sceneInfo : register(b0);
StructuredBuffer<BoxInstanceInfo> _boxInstanceInfos : register(t0);

Debug3dPSInput main(Debug3dVSInput input){
    uint instanceId = input._InstanceId;
    BoxInstanceInfo info = _boxInstanceInfos[instanceId];
    
    float3 worldMatrixCol0 = info._matrixWorld[0] / 2.0;
    float3 worldMatrixCol1 = info._matrixWorld[1] / 2.0;
    float3 worldMatrixCol2 = info._matrixWorld[2] / 2.0;
    float3 worldMatrixCol3 = info._matrixWorld[3];

    uint vertexId = input._vertexId;
    float3 boxMin = worldMatrixCol3 - worldMatrixCol0 - worldMatrixCol1 - worldMatrixCol2;
    float3 boxMax = worldMatrixCol3 + worldMatrixCol0 + worldMatrixCol1 + worldMatrixCol2;
    float3 vertexPositions[8] = { 
        boxMin, boxMin + worldMatrixCol0, boxMin + worldMatrixCol1, boxMin + worldMatrixCol2,
        boxMax, boxMax - worldMatrixCol0, boxMax - worldMatrixCol1, boxMax - worldMatrixCol2 };
    uint vertexIndices[24] = { 0, 1, 0, 2, 0, 3,
                               2, 5, 2, 7, 6, 3,
                               6, 1, 3, 5, 1, 7,
                               4, 5, 4, 6 ,4 ,7 };
    uint vertexIndex = vertexIndices[input._vertexId];
    float4 position = float4(vertexPositions[vertexIndex], 1.0);
    
    Debug3dPSInput result = (Debug3dPSInput)0;
    result._position = mul(position, _sceneInfo._matrixViewProj);
    result._color = info._color.rgb;

    return result;
}