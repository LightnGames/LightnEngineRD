#include "../shaderInput.sfh"
#include "../constant_buffer.sfh"
#include "../gpu_driven.sfh"

ConstantBuffer<ViewInfo> _sceneInfo : register(b0);

StructuredBuffer<Mesh> _meshes : register(t1);
StructuredBuffer<MeshInstance> _meshInstances : register(t6);
ByteAddressBuffer _currentLodLevels : register(t16);

float3 heatMap(float unormValue) {
    float redValue = min(unormValue * 2.0, 1.0);
    float blueValue = max((unormValue - 0.5) * 2.0, 0.0);
    return lerp(float3(1, 0, 0), lerp(float3(0, 1, 0), float3(0, 0, 1), blueValue), redValue);
}

float4 main(VertexOut input) : SV_TARGET {
    MeshInstance meshInstance = _meshInstances[input._meshInstanceIndex];
    Mesh mesh = _meshes[meshInstance._meshIndex];
    float lodPersentage = 0.0f;
    if(mesh._lodMeshCount > 1) {
        uint currentLodLevel = _currentLodLevels.Load(input._meshInstanceIndex * UINT32_SIZE_IN_BYTE);
        lodPersentage = currentLodLevel / (float) (mesh._lodMeshCount - 1);
    }
    
    float3 diffuseColor = lerp(heatMap(lodPersentage), float3(1, 1, 1), 0.2);
    return float4(diffuseColor, 1.0);
}