#define FLT_MAX 3.402823466e+38
#define UINT16_MAX 65535
#define UINT32_MAX 4294967295

float4 UnpackCone(uint packed) {
    float4 v;
    v.x = float((packed >> 0) & 0xFF);
    v.y = float((packed >> 8) & 0xFF);
    v.z = float((packed >> 16) & 0xFF);
    v.w = float((packed >> 24) & 0xFF);

    v = v / 255.0;
    v.xyz = v.xyz * 2.0 - 1.0;

    return v;
}

// 32bit uint -> 16bit float2
float2 unpackTexCoords(uint packed) {
    uint x = (packed.x >> 0) & 0xffff;
    uint y = (packed.x >> 16) & 0xffff;
    float div = UINT16_MAX / 8.0;
    return (float2(x, y) / div) - 4.0;
}

// Values used to linearize the Z buffer (http://www.humus.name/temp/Linearize%20depth.txt)
float computeLinerDepth(float nonLinerDepth, float nearClip, float farClip) {
    float farNear = farClip / nearClip;
    float invFarNear = 1.0 - farNear;
    return 1.0 / (invFarNear * nonLinerDepth + farNear);
}

uint computeLinerDepth(uint nonLinerDepth, uint depthFormat, float nearClip, float farClip) {
    float depth = nonLinerDepth / (float) depthFormat;
    return computeLinerDepth(depth, nearClip, farClip) * UINT16_MAX;
}

// AABBの法線方向に最も近いポイントを探す
float3 getPositivePoint(float3 boundsMin, float3 boundsMax, float3 planeNormal) {
    float3 result = boundsMin;
    float3 size = boundsMax - boundsMin;

    result.x += planeNormal.x > 0.0 ? size.x : 0.0;
    result.y += planeNormal.y > 0.0 ? size.y : 0.0;
    result.z += planeNormal.z > 0.0 ? size.z : 0.0;
    return result;
}

float3 getNegativePoint(float3 boundsMin, float3 boundsMax, float3 planeNormal) {
    return getPositivePoint(boundsMin, boundsMax, -planeNormal);
}