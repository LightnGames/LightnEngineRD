#include "gpu_culling_function.sfh"

ByteAddressBuffer _primitiveInstancingInfoOffsets : register(t0);
ByteAddressBuffer _primitiveInstancingInfoCounts : register(t1);

RWStructuredBuffer<DispatchMeshIndirectArgument> _indirectArguments : register(u0);
RWByteAddressBuffer _countBuffer : register(u1);

[numthreads(128, 1, 1)]
void main(uint gid : SV_GroupID, uint gtid : SV_GroupThreadID, uint dtid : SV_DispatchThreadID) {
    uint instanceCount = _primitiveInstancingInfoCounts.Load(dtid * UINT32_SIZE_IN_BYTE);
    if (instanceCount == 0) {
        return;
    }
    
    uint batchIndex = dtid % PRIMITIVE_INSTANCING_PRIMITIVE_COUNT_MAX;
    uint shaderSetIndex = dtid / PRIMITIVE_INSTANCING_PRIMITIVE_COUNT_MAX;
    uint batchCount = batchIndex + 1;
    uint primitiveCount = instanceCount * batchCount;
    uint batchCountPerGroup = 128 / batchCount;
    
    uint currentCount = 0;
    uint countOffset = shaderSetIndex * UINT32_SIZE_IN_BYTE;
    _countBuffer.InterlockedAdd(countOffset, 1, currentCount);
    
    DispatchMeshIndirectArgument arguments;
    arguments._constant._meshletInstanceInfoOffset = _primitiveInstancingInfoOffsets.Load(dtid * UINT32_SIZE_IN_BYTE);
    arguments._constant._instanceCount = instanceCount;
    arguments._constant._meshletCount = 126 / batchCount;
    arguments._dispatchX = (primitiveCount / 128) + 1;
    arguments._dispatchX = 1;
    arguments._dispatchY = 1;
    arguments._dispatchZ = 1;
    
    uint indirectArgumentOffset = shaderSetIndex * PRIMITIVE_INSTANCING_PRIMITIVE_COUNT_MAX + currentCount;
    _indirectArguments[indirectArgumentOffset] = arguments;
}