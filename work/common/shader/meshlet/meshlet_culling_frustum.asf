#include "meshlet_culling_template.sfh"

[numthreads(THREAD_NUM, 1, 1)]
void main(uint gid : SV_GroupID, uint gtid : SV_GroupThreadID, uint dtid : SV_DispatchThreadID) {
    bool visible = false;
    bool inFrustum = false;
    bool isFrontFace = false;
    
    BatchedSubMeshInfo batchedSubMeshInfo = _batchedSubMeshInfos[_batchedSubMeshInfoIndex._index];
    uint meshletLocalIndex = dtid % batchedSubMeshInfo._meshletCountMax;
    uint meshInstanceOffset = dtid / batchedSubMeshInfo._meshletCountMax;
    uint meshletIndex = batchedSubMeshInfo._meshletIndex + meshletLocalIndex;
    if (meshInstanceOffset < batchedSubMeshInfo._meshInstanceCount)
    {
        MeshInstance meshInstance = _meshInstances[batchedSubMeshInfo._meshInstanceIndex];
        MeshletBounds meshletBounds = computeTransformedBounds(meshInstance, _meshlets[meshletIndex]);
        ViewInfo viewInfo = _viewInfo;
        float3 boundsMin = meshletBounds._boundsMin;
        float3 boundsMax = meshletBounds._boundsMax;
        inFrustum = doFrustumCulling(boundsMin, boundsMax, viewInfo);
        isFrontFace = doBackFaceCulling(meshletBounds); 
            
        visible = inFrustum && isFrontFace;
    }
    
    if (visible) {
        uint index = WavePrefixCountBits(visible);
        writePayloadStruct(index, meshletIndex, batchedSubMeshInfo);
        _passMeshlets._meshInstanceOffsets[index] = meshInstanceOffset;
    }
    
    uint visibleCount = WaveActiveCountBits(visible);
    DispatchMesh(visibleCount, 1, 1, _passMeshlets);
}