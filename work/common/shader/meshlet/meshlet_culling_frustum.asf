#include "meshlet_culling_template.sfh"

[numthreads(THREAD_NUM, 1, 1)]
void main(in uint3 groupID : SV_GroupID, in uint3 groupThreadID : SV_GroupThreadID) {
    bool visible = false;
    bool inFrustum = false;
    bool isFrontFace = false;
    uint meshletInstanceLocalIndex = groupID.x * THREAD_NUM + groupThreadID.x;
    uint meshletInfoIndex = groupID.y;
    BatchedMeshletInfo batchedMeshletInfo = _batchedMeshletInfos[meshletInfoIndex];
    
    uint packedMeshletOffset = meshletInstanceLocalIndex / batchedMeshletInfo._packedMeshletCount;
    PackedMeshletInfo packedMeshletInfo = _packedMeshletInfos[batchedMeshletInfo._packedMeshletOffset + packedMeshletOffset];
    
    uint meshletLocalIndex = meshletInstanceLocalIndex % batchedMeshletInfo._packedMeshletCount;
    uint meshletIndex = meshletLocalIndex + packedMeshletInfo._meshletIndex;
    if (meshletInstanceLocalIndex < batchedMeshletInfo._totalMeshletCountMax) {
        MeshInstance meshInstance = _meshInstances[packedMeshletInfo._meshInstanceIndex];
        MeshletBounds meshletBounds = computeTransformedBounds(meshInstance, _meshlets[meshletIndex]);
        ViewInfo viewInfo = _viewInfo;
        float3 boundsMin = meshletBounds._boundsMin;
        float3 boundsMax = meshletBounds._boundsMax;
        inFrustum = doFrustumCulling(boundsMin, boundsMax, viewInfo);
        isFrontFace = doBackFaceCulling(meshletBounds); 
            
        visible = inFrustum && isFrontFace;
    }
    
    if (visible) {
        uint index = WavePrefixCountBits(visible);
        writePayloadStruct(index, meshletIndex, batchedMeshletInfo, packedMeshletInfo);
    }
    
    uint visibleCount = WaveActiveCountBits(visible);
    DispatchMesh(visibleCount, 1, 1, _passMeshlets);
}